{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamkapoor/nodejs-chat/client/src/Room/VideoGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './VideoGrid.css';\nimport Peer from 'peerjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VideoGrid({\n  socket,\n  name,\n  room\n}) {\n  _s();\n\n  const [videos, setVideos] = useState([]); // const myPeer = new Peer(undefined, {\n  // \thost: '/',\n  // \tport: '3000',\n  // })\n  // const myVideo = document.createElement('video')\n  // myVideo.muted = true\n  // const peers = {}\n  // navigator.mediaDevices.getUserMedia({\n  // \tvideo: true,\n  // \taudio: true\n  // }).then(stream => {\n  // \taddVideoStream(myVideo, stream)\n  // \tmyPeer.on('call', call => {\n  // \t\tcall.answer(stream)\n  // \t\tconst video = document.createElement('video')\n  // \t\tcall.on('stream', userVideoStream => {\n  // \t\t\taddVideoStream(video, userVideoStream)\n  // \t\t})\n  // \t})\n  // \tsocket.on('user-connected', userId => {\n  // \t\tconnectToNewUser(userId, stream)\n  // \t})\n  // })\n  // socket.on('user-disconnected', userId => {\n  // \tif (peers[userId]) peers[userId].close()\n  // })\n  // myPeer.on('open', id => {\n  // \tsocket.emit('join-room', room, id)\n  // })\n  // function connectToNewUser(userId, stream) {\n  // \tconst call = myPeer.call(userId, stream)\n  // \tconst video = document.createElement('video')\n  // \tcall.on('stream', userVideoStream => {\n  // \t\taddVideoStream(video, userVideoStream)\n  // \t})\n  // \tcall.on('close', () => {\n  // \t\tvideo.remove()\n  // \t})\n  // \tpeers[userId] = call\n  // }\n  // function addVideoStream(video, stream) {\n  // \tvideo.srcObject = stream\n  // \tvideo.addEventListener('loadedmetadata', () => {\n  // \t\tvideo.play()\n  // \t})\n  // \tlet tempVideos = videos;\n  // \ttempVideos.push(video);\n  // \tsetVideos(tempVideos);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"video-grid\",\n    children: videos.map(video => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [video, \" hi \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 6\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 3\n  }, this);\n}\n\n_s(VideoGrid, \"SbG6CMM6FaXD5465NFUm02FT42U=\");\n\n_c = VideoGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoGrid\");","map":{"version":3,"sources":["/Users/shubhamkapoor/nodejs-chat/client/src/Room/VideoGrid.js"],"names":["React","useState","useEffect","useRef","Peer","VideoGrid","socket","name","room","videos","setVideos","map","video"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,iBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAAnB,EAA2C;AAAA;;AACzD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC,CADyD,CAEzD;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACC;AAAK,IAAA,EAAE,EAAC,YAAR;AAAA,cACGQ,MAAM,CAACE,GAAP,CAAWC,KAAK,IAAI;AACrB,0BACC;AAAA,mBAAOA,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAGA,KAJC;AADH;AAAA;AAAA;AAAA;AAAA,UADD;AASA;;GAtEuBP,S;;KAAAA,S","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport './VideoGrid.css'\nimport Peer from 'peerjs'\n\nexport default function VideoGrid({ socket, name, room }) {\n\tconst [videos, setVideos] = useState([]);\n\t// const myPeer = new Peer(undefined, {\n\t// \thost: '/',\n\t// \tport: '3000',\n\t// })\n\n\t// const myVideo = document.createElement('video')\n\t// myVideo.muted = true\n\t// const peers = {}\n\n\t// navigator.mediaDevices.getUserMedia({\n\t// \tvideo: true,\n\t// \taudio: true\n\t// }).then(stream => {\n\t// \taddVideoStream(myVideo, stream)\n\n\t// \tmyPeer.on('call', call => {\n\t// \t\tcall.answer(stream)\n\t// \t\tconst video = document.createElement('video')\n\t// \t\tcall.on('stream', userVideoStream => {\n\t// \t\t\taddVideoStream(video, userVideoStream)\n\t// \t\t})\n\t// \t})\n\t\n\t// \tsocket.on('user-connected', userId => {\n\t// \t\tconnectToNewUser(userId, stream)\n\t// \t})\n\t// })\n\n\t// socket.on('user-disconnected', userId => {\n\t// \tif (peers[userId]) peers[userId].close()\n\t// })\n\n\t// myPeer.on('open', id => {\n\t// \tsocket.emit('join-room', room, id)\n\t// })\n\t\n\t// function connectToNewUser(userId, stream) {\n\t// \tconst call = myPeer.call(userId, stream)\n\t// \tconst video = document.createElement('video')\n\t// \tcall.on('stream', userVideoStream => {\n\t// \t\taddVideoStream(video, userVideoStream)\n\t// \t})\n\t// \tcall.on('close', () => {\n\t// \t\tvideo.remove()\n\t// \t})\n\t\n\t// \tpeers[userId] = call\n\t// }\n\n\t// function addVideoStream(video, stream) {\n\t// \tvideo.srcObject = stream\n\t// \tvideo.addEventListener('loadedmetadata', () => {\n\t// \t\tvideo.play()\n\t// \t})\n\t// \tlet tempVideos = videos;\n\t// \ttempVideos.push(video);\n\t// \tsetVideos(tempVideos);\n\t// }\n\n\treturn (\n\t\t<div id=\"video-grid\">\n\t\t\t{ videos.map(video => {\n\t\t\t\treturn(\n\t\t\t\t\t<div>{ video } hi </div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}"]},"metadata":{},"sourceType":"module"}