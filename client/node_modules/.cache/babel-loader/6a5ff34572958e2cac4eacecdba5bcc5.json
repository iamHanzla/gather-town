{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamkapoor/nodejs-chat/client/src/Room/VideoGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './VideoGrid.css';\nimport Peer from 'peerjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VideoGrid({\n  socket,\n  name,\n  room\n}) {\n  _s();\n\n  const [stream, setStream] = useState(null);\n  const [me, setMe] = useState('');\n  const [call, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const myVideo = useRef();\n  const userVideo = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    socket.on('me', id => {\n      setMe(id);\n    });\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivedCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false\n    });\n    peer.on('signal', data => {\n      socket.emit('answerCall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n  };\n\n  const callUser = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Video Player\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this);\n}\n\n_s(VideoGrid, \"KK5ay5hTgVDrTfYhFQ64lfZMW5o=\");\n\n_c = VideoGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoGrid\");","map":{"version":3,"sources":["/Users/shubhamkapoor/nodejs-chat/client/src/Room/VideoGrid.js"],"names":["React","useState","useEffect","useRef","Peer","VideoGrid","socket","name","room","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","myVideo","userVideo","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","callerName","signal","isReceivedCall","answerCall","peer","initiator","trickle","data","emit","to","callUser"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,iBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAAnB,EAA2C;AAAA;;AACzD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACU,EAAD,EAAKC,KAAL,IAAcX,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMkB,OAAO,GAAGhB,MAAM,EAAtB;AACA,QAAMiB,SAAS,GAAGjB,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACfmB,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAApC,EACEC,IADF,CACQC,aAAD,IAAmB;AACxBjB,MAAAA,SAAS,CAACiB,aAAD,CAAT;AACAR,MAAAA,OAAO,CAACS,OAAR,CAAgBC,SAAhB,GAA4BF,aAA5B;AACA,KAJF;AAMCrB,IAAAA,MAAM,CAACwB,EAAP,CAAU,IAAV,EAAiBC,EAAD,IAAQ;AACvBnB,MAAAA,KAAK,CAACmB,EAAD,CAAL;AACA,KAFD;AAIAzB,IAAAA,MAAM,CAACwB,EAAP,CAAU,UAAV,EAAsB,CAAC;AAAEE,MAAAA,IAAF;AAAQzB,MAAAA,IAAI,EAAE0B,UAAd;AAA0BC,MAAAA;AAA1B,KAAD,KAAwC;AAC7DpB,MAAAA,OAAO,CAAC;AAAEqB,QAAAA,cAAc,EAAE,IAAlB;AAAwBH,QAAAA,IAAxB;AAA8BzB,QAAAA,IAAI,EAAE0B,UAApC;AAAgDC,QAAAA;AAAhD,OAAD,CAAP;AACA,KAFD;AAGD,GAdQ,EAcN,EAdM,CAAT;;AAgBA,QAAME,UAAU,GAAG,MAAM;AACxBpB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,UAAMqB,IAAI,GAAG,IAAIjC,IAAJ,CAAS;AAAEkC,MAAAA,SAAS,EAAE,KAAb;AAAoBC,MAAAA,OAAO,EAAE;AAA7B,KAAT,CAAb;AAEAF,IAAAA,IAAI,CAACP,EAAL,CAAQ,QAAR,EAAmBU,IAAD,IAAU;AAC3BlC,MAAAA,MAAM,CAACmC,IAAP,CAAY,YAAZ,EAA0B;AAAEP,QAAAA,MAAM,EAAEM,IAAV;AAAgBE,QAAAA,EAAE,EAAE7B,IAAI,CAACmB;AAAzB,OAA1B;AACA,KAFD;AAIAK,IAAAA,IAAI,CAACP,EAAL,CAAQ,QAAR,EAAmBH,aAAD,IAAmB;AACpCP,MAAAA,SAAS,CAACQ,OAAV,CAAkBC,SAAlB,GAA8BF,aAA9B;AACA,KAFD;AAGA,GAXD;;AAaA,QAAMgB,QAAQ,GAAG,MAAM,CAEtB,CAFD;;AAIA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GA/CuBtC,S;;KAAAA,S","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport './VideoGrid.css'\nimport Peer from 'peerjs'\n\nexport default function VideoGrid({ socket, name, room }) {\n\tconst [stream, setStream] = useState(null);\n\tconst [me, setMe] = useState('');\n\tconst [call, setCall] = useState({});\n\tconst [callAccepted, setCallAccepted] = useState(false);\n\tconst [callEnded, setCallEnded] = useState(false);\n\tconst myVideo = useRef();\n\tconst userVideo = useRef();\n\n\tuseEffect(() => {\n\t\tnavigator.mediaDevices.getUserMedia({ video: true, audio: true })\n\t\t\t.then((currentStream) => {\n\t\t\t\tsetStream(currentStream);\n\t\t\t\tmyVideo.current.srcObject = currentStream;\n\t\t\t});\n\n\t\t\tsocket.on('me', (id) => {\n\t\t\t\tsetMe(id);\n\t\t\t});\n\n\t\t\tsocket.on('calluser', ({ from, name: callerName, signal }) => {\n\t\t\t\tsetCall({ isReceivedCall: true, from, name: callerName, signal })\n\t\t\t})\n\t}, []);\n\n\tconst answerCall = () => {\n\t\tsetCallAccepted(true);\n\t\tconst peer = new Peer({ initiator: false, trickle: false })\n\n\t\tpeer.on('signal', (data) => {\n\t\t\tsocket.emit('answerCall', { signal: data, to: call.from });\n\t\t})\n\n\t\tpeer.on('stream', (currentStream) => {\n\t\t\tuserVideo.current.srcObject = currentStream;\n\t\t})\n\t}\n\n\tconst callUser = () => {\n\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\tVideo Player\n\t\t</div>\n\t)\n}"]},"metadata":{},"sourceType":"module"}