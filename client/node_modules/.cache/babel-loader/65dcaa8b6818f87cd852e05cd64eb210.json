{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamkapoor/nodejs-chat/client/src/Room/VideoGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './VideoGrid.css';\nimport Peer from 'peerjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VideoGrid({\n  socket,\n  name,\n  room\n}) {\n  _s();\n\n  const [stream, setStream] = useState(null);\n  const [me, setMe] = useState('');\n  const myVideo = useRef();\n  var peer = new Peer(undefined, {\n    path: '/peerjs',\n    host: '/',\n    port: '3001'\n  });\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    socket.on('me', id => {\n      setMe(id);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Video Player\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, this);\n}\n\n_s(VideoGrid, \"Pnl3NlF8G5sR+69/nGwJX2Q8ZrY=\");\n\n_c = VideoGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoGrid\");","map":{"version":3,"sources":["/Users/shubhamkapoor/nodejs-chat/client/src/Room/VideoGrid.js"],"names":["React","useState","useEffect","useRef","Peer","VideoGrid","socket","name","room","stream","setStream","me","setMe","myVideo","peer","undefined","path","host","port","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,iBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAAnB,EAA2C;AAAA;;AACzD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACU,EAAD,EAAKC,KAAL,IAAcX,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAMY,OAAO,GAAGV,MAAM,EAAtB;AAEA,MAAIW,IAAI,GAAG,IAAIV,IAAJ,CAASW,SAAT,EAAoB;AAC9BC,IAAAA,IAAI,EAAE,SADwB;AAE9BC,IAAAA,IAAI,EAAE,GAFwB;AAG9BC,IAAAA,IAAI,EAAE;AAHwB,GAApB,CAAX;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AACfiB,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAApC,EACEC,IADF,CACQC,aAAD,IAAmB;AACxBf,MAAAA,SAAS,CAACe,aAAD,CAAT;AACAZ,MAAAA,OAAO,CAACa,OAAR,CAAgBC,SAAhB,GAA4BF,aAA5B;AACA,KAJF;AAMCnB,IAAAA,MAAM,CAACsB,EAAP,CAAU,IAAV,EAAiBC,EAAD,IAAQ;AACvBjB,MAAAA,KAAK,CAACiB,EAAD,CAAL;AACA,KAFD;AAGD,GAVQ,CAAT;AAYA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GA5BuBxB,S;;KAAAA,S","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport './VideoGrid.css'\nimport Peer from 'peerjs'\n\nexport default function VideoGrid({ socket, name, room }) {\n\tconst [stream, setStream] = useState(null);\n\tconst [me, setMe] = useState('');\n\tconst myVideo = useRef();\n\n\tvar peer = new Peer(undefined, {\n\t\tpath: '/peerjs',\n\t\thost: '/',\n\t\tport: '3001'\n\t});\n\n\tuseEffect(() => {\n\t\tnavigator.mediaDevices.getUserMedia({ video: true, audio: true })\n\t\t\t.then((currentStream) => {\n\t\t\t\tsetStream(currentStream);\n\t\t\t\tmyVideo.current.srcObject = currentStream;\n\t\t\t});\n\n\t\t\tsocket.on('me', (id) => {\n\t\t\t\tsetMe(id);\n\t\t\t})\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\tVideo Player\n\t\t</div>\n\t)\n}"]},"metadata":{},"sourceType":"module"}