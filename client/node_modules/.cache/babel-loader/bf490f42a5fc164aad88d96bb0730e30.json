{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamkapoor/nodejs-chat/client/src/Room/VideoGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './VideoGrid.css';\nimport Peer from 'peerjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VideoGrid({\n  socket,\n  name,\n  room\n}) {\n  _s();\n\n  const [videos, setVideos] = useState([]);\n  const myPeer = new Peer(undefined, {\n    host: '/',\n    port: '3000'\n  });\n  const myVideo = document.createElement('video');\n  myVideo.muted = true;\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  }).then(stream => {\n    addVideoStream(myVideo, stream);\n  });\n  myPeer.on('open', id => {\n    socket.emit('join-room', room, id);\n  });\n\n  function addVideoStream(video, stream) {\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n    let tempVideos = videos;\n    tempVideos.push(video);\n    setVideos(tempVideos);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"video-grid\",\n    children: videos.map(video => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video\",\n        children: video\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this);\n}\n\n_s(VideoGrid, \"SbG6CMM6FaXD5465NFUm02FT42U=\");\n\n_c = VideoGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoGrid\");","map":{"version":3,"sources":["/Users/shubhamkapoor/nodejs-chat/client/src/Room/VideoGrid.js"],"names":["React","useState","useEffect","useRef","Peer","VideoGrid","socket","name","room","videos","setVideos","myPeer","undefined","host","port","myVideo","document","createElement","muted","navigator","mediaDevices","getUserMedia","video","audio","then","stream","addVideoStream","on","id","emit","srcObject","addEventListener","play","tempVideos","push","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,iBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAAnB,EAA2C;AAAA;;AACzD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMU,MAAM,GAAG,IAAIP,IAAJ,CAASQ,SAAT,EAAoB;AAClCC,IAAAA,IAAI,EAAE,GAD4B;AAElCC,IAAAA,IAAI,EAAE;AAF4B,GAApB,CAAf;AAKA,QAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAhB;AACAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,IAAhB;AAEAC,EAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACnCC,IAAAA,KAAK,EAAE,IAD4B;AAEnCC,IAAAA,KAAK,EAAE;AAF4B,GAApC,EAGGC,IAHH,CAGQC,MAAM,IAAI;AACjBC,IAAAA,cAAc,CAACX,OAAD,EAAUU,MAAV,CAAd;AACA,GALD;AAOAd,EAAAA,MAAM,CAACgB,EAAP,CAAU,MAAV,EAAkBC,EAAE,IAAI;AACvBtB,IAAAA,MAAM,CAACuB,IAAP,CAAY,WAAZ,EAAyBrB,IAAzB,EAA+BoB,EAA/B;AACA,GAFD;;AAIA,WAASF,cAAT,CAAwBJ,KAAxB,EAA+BG,MAA/B,EAAuC;AACtCH,IAAAA,KAAK,CAACQ,SAAN,GAAkBL,MAAlB;AACAH,IAAAA,KAAK,CAACS,gBAAN,CAAuB,gBAAvB,EAAyC,MAAM;AAC9CT,MAAAA,KAAK,CAACU,IAAN;AACA,KAFD;AAGA,QAAIC,UAAU,GAAGxB,MAAjB;AACAwB,IAAAA,UAAU,CAACC,IAAX,CAAgBZ,KAAhB;AACAZ,IAAAA,SAAS,CAACuB,UAAD,CAAT;AACA;;AAED,sBACC;AAAK,IAAA,EAAE,EAAC,YAAR;AAAA,cACGxB,MAAM,CAAC0B,GAAP,CAAab,KAAD,IAAW;AACxB,0BACC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,kBACGA;AADH;AAAA;AAAA;AAAA;AAAA,cADD;AAKA,KANC;AADH;AAAA;AAAA;AAAA;AAAA,UADD;AAWA;;GA1CuBjB,S;;KAAAA,S","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport './VideoGrid.css'\nimport Peer from 'peerjs'\n\nexport default function VideoGrid({ socket, name, room }) {\n\tconst [videos, setVideos] = useState([]);\n\tconst myPeer = new Peer(undefined, {\n\t\thost: '/',\n\t\tport: '3000',\n\t})\n\n\tconst myVideo = document.createElement('video')\n\tmyVideo.muted = true\n\n\tnavigator.mediaDevices.getUserMedia({\n\t\tvideo: true,\n\t\taudio: true\n\t}).then(stream => {\n\t\taddVideoStream(myVideo, stream)\n\t})\n\n\tmyPeer.on('open', id => {\n\t\tsocket.emit('join-room', room, id)\n\t})\n\t\n\tfunction addVideoStream(video, stream) {\n\t\tvideo.srcObject = stream\n\t\tvideo.addEventListener('loadedmetadata', () => {\n\t\t\tvideo.play()\n\t\t})\n\t\tlet tempVideos = videos;\n\t\ttempVideos.push(video);\n\t\tsetVideos(tempVideos);\n\t}\n\n\treturn (\n\t\t<div id=\"video-grid\">\n\t\t\t{ videos.map( (video) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"video\">\n\t\t\t\t\t\t{ video }\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}"]},"metadata":{},"sourceType":"module"}